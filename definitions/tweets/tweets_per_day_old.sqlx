config {
  type: "incremental",
  uniqueKey: ["unique_id"],
  tags: ["tweets"],
  description: "Tweets per day from each member of parliament.",
  bigquery: {
    partitionBy: "date_trunc(date, MONTH)",
    clusterBy: ["party", "name"],
    updatePartitionFilter: "date >= current_date()-5"
  },
  disabled: true
}

js {
  const datesFromStart = `GENERATE_DATE_ARRAY(
      DATE('2019-10-08'),
      CURRENT_DATE(),
      INTERVAL 1 DAY
    )`;

  const incrementalFilter = `date >= date_checkpoint`;
}

with tweets_daily as (
  select
    date,
    name,
    COUNT(DISTINCT id_str) as tweets,
    max(user_followers) as user_followers,
    array_concat_agg(user_mentions) as user_mentions,
    array_concat_agg(mp_mentions) as mp_mentions,
    array_concat_agg(hashtags) as hashtags
  from
    ${ref("tweets")} ${when(incremental(), `where ${incrementalFilter}`)}
  group by
    date,
    name
),
members as (
  select
    *,
    ${datesFromStart} as dates
  from
    ${resolve('mp_data_flattened_term_view')}
),
-- create a table where each member of parliament has one row per date
-- only include dates where the mep has been in the parliament
members_unnest as (
  select
    *
  except(dates)
  from
    members,
    unnest(dates) as date
  where
    -- only include the dates where the person was an active mp
    date >= term_start
    and date <= term_end
),
-- same as previous but with the incremental filter
members_unnest_incremental as (
  select
    *
  from
    members_unnest ${when(incremental(), `where ${incrementalFilter}`)}
),
ministers as (
  select
    *,
    ${datesFromStart} as dates
  from
    ${resolve('minister_terms_flattened')}
),
ministers_unnest as (
  select
    *
  except(dates)
  from
    ministers,
    unnest(dates) as date
  where
    -- only include the dates where the person was an active mp
    date >= term_start
    and date <= term_end
),
ministers_unnest_incremental as (
  select
    *
  from
    ministers_unnest ${when(incremental(), `where ${incrementalFilter}`)}
),
-- the reverse of the mp_mentions, which other mps have mentioned the selected mp
mentioned_by as (
  select
    A.date,
    -- who did the mention
    A.name as mentioner,
    B.party as mentioner_party,
    B.parliament_group as mentioner_parliament_group,
    -- who was mentioned
    mentions.name as mentioned_name
  from
    tweets_daily A,
    unnest(mp_mentions) as mentions
    left join members_unnest_incremental B on A.name = B.name
    and A.date = B.date
),
-- similar data structure as the mp_mentions array
mentioned_by_nested as (
  select
    date,
    mentioned_name,
    array_agg(
      (
        select
          as struct mentioner as name,
          mentioner_party as party,
          mentioner_parliament_group as parliament_group
      )
    ) as mp_mentions_by
  from
    mentioned_by
  group by
    date,
    mentioned_name
),
join_data as (
  select
    A.*,
    coalesce(B.tweets, 0) as tweets,
    B.user_followers,
    B.user_mentions,
    B.mp_mentions,
    C.mp_mentions_by,
    B.hashtags,
    D.role as government_role,
    D.government_name
  from
    members_unnest_incremental A
    left join tweets_daily B on A.date = B.date
    and A.name = B.name
    left join mentioned_by_nested C on A.date = C.date
    and A.name = C.mentioned_name
    left join ministers_unnest_incremental D on A.date = D.date
    and A.name = D.name
),
-- this gets the last followers amount for each mp
daily_followers as (
  select
    name,
    date,
    max(user_followers) as user_followers
  from
    ${ref('tweets')} A
  group by
    1,
    2
),
-- daily number of user followers, data from the latest tweet if there is no data for the current date
last_followers as (
  select
    B.name,
    B.date,
    last_value(user_followers ignore nulls) over (
      partition by B.name
      order by
        B.date asc rows between unbounded preceding
        and current row
    ) as user_followers
  from
    daily_followers A
    right join members_unnest B on A.date = B.date
    and A.name = B.name
),
join_followers as (
  select
    farm_fingerprint(concat(A.name, A.date, A.party)) as unique_id,
    A.*
  except(user_followers),
    if(
      A.date < '2020-01-01',
      null,
      B.user_followers
    ) as user_followers,
    if(
      A.date < '2020-01-01',
      null,
      B.user_followers - lag(B.user_followers) over(
        partition by A.name
        order by
          A.date asc
      )
    ) as user_followers_change
  from
    join_data A
    left join last_followers B on A.name = B.name
    and A.date = B.date
),
-- data required for getting the 7 day twitter activity on incremental refreshes
tweet_activity_window_tweets as (
  select
    date,
    name,
    COUNT(DISTINCT id_str) as tweets
  from
    ${ref("tweets")}
  where
    date >= date_checkpoint_minus_6
  group by
    date,
    name
),
-- a member and date table needs to be generated
tweet_activity_window_members as (
  select
    date,
    name,
    if(
      sum(tweets) over(
        partition by name
        order by
          date asc rows between 6 preceding
          and current row
      ) > 0,
      1,
      0
    ) active_last_7_days
  from
    members_unnest
    left join tweet_activity_window_tweets using(date, name)
  where
    date >= date_checkpoint_minus_6
),
tweet_activity_incremental_update as (
  select
    *
  from
    tweet_activity_window_members
  where
    date >= date_checkpoint
)
${when(incremental(), `
select
  join_followers.*,
  tweet_activity_incremental_update.active_last_7_days
from
  join_followers left join tweet_activity_incremental_update using(date, name)
`
,`
select
  *,
  -- doesn't work with incremental refresh
  if(
    sum(tweets) over(
      partition by name
      order by
        date asc rows between 6 preceding
        and current row
    ) > 0,
    1,
    0
  ) active_last_7_days
from
  join_followers
`)}

pre_operations {
  -- max date of data already existing in the table
  declare date_checkpoint default (
    select
      max(date)
    from
      ${self()}
  );
  -- some more data from the past is needed for some calculations
  -- used for the last 7 days window
  declare date_checkpoint_minus_6 default (
    select
      date_checkpoint - 6
  );
}
